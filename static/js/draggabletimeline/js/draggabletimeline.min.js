! function(a, b) {
    "function" == typeof define && define.amd ? define(b) : a.Dragdealer = b()
}(this, function() {
    var a = function(a, b) {
        this.bindMethods(), this.options = this.applyDefaults(b || {}), this.wrapper = this.getWrapperElement(a), this.wrapper && (this.handle = this.getHandleElement(this.wrapper, this.options.handleClass), this.handle && (this.init(), this.bindEventListeners()))
    };
    a.prototype = {
        defaults: {
            disabled: !1,
            horizontal: !0,
            vertical: !1,
            slide: !0,
            steps: 0,
            snap: !1,
            loose: !1,
            speed: .1,
            xPrecision: 0,
            yPrecision: 0,
            handleClass: "handle"
        },
        init: function() {
            this.value = {
                prev: [-1, -1],
                current: [this.options.x || 0, this.options.y || 0],
                target: [this.options.x || 0, this.options.y || 0]
            }, this.offset = {
                wrapper: [0, 0],
                mouse: [0, 0],
                prev: [-999999, -999999],
                current: [0, 0],
                target: [0, 0]
            }, this.change = [0, 0], this.stepRatios = this.calculateStepRatios(), this.activity = !1, this.dragging = !1, this.tapping = !1, this.reflow(), this.options.disabled && this.disable()
        },
        applyDefaults: function(a) {
            for (var b in this.defaults) a.hasOwnProperty(b) || (a[b] = this.defaults[b]);
            return a
        },
        getWrapperElement: function(a) {
            return "string" == typeof a ? document.getElementById(a) : a
        },
        getHandleElement: function(a, b) {
            var e, c = a.getElementsByTagName("div"),
                d = new RegExp("(^|\\s)" + b + "(\\s|$)");
            for (e = 0; e < c.length; e++)
                if (d.test(c[e].className)) return c[e]
        },
        calculateStepRatios: function() {
            var a = [];
            if (this.options.steps > 1)
                for (var b = 0; b <= this.options.steps - 1; b++) a[b] = b / (this.options.steps - 1);
            return a
        },
        setWrapperOffset: function() {
            this.offset.wrapper = h.get(this.wrapper)
        },
        calculateBounds: function() {
            var a = {
                top: this.options.top || 0,
                bottom: -(this.options.bottom || 0) + this.wrapper.offsetHeight,
                left: this.options.left || 0,
                right: -(this.options.right || 0) + this.wrapper.offsetWidth
            };
            return a.availWidth = a.right - a.left - this.handle.offsetWidth, a.availHeight = a.bottom - a.top - this.handle.offsetHeight, a
        },
        calculateValuePrecision: function() {
            var a = this.options.xPrecision || Math.abs(this.bounds.availWidth),
                b = this.options.yPrecision || Math.abs(this.bounds.availHeight);
            return [a ? 1 / a : 0, b ? 1 / b : 0]
        },
        bindMethods: function() {
            this.onHandleMouseDown = b(this.onHandleMouseDown, this), this.onHandleTouchStart = b(this.onHandleTouchStart, this), this.onDocumentMouseMove = b(this.onDocumentMouseMove, this), this.onWrapperTouchMove = b(this.onWrapperTouchMove, this), this.onWrapperMouseDown = b(this.onWrapperMouseDown, this), this.onWrapperTouchStart = b(this.onWrapperTouchStart, this), this.onDocumentMouseUp = b(this.onDocumentMouseUp, this), this.onDocumentTouchEnd = b(this.onDocumentTouchEnd, this), this.onHandleClick = b(this.onHandleClick, this), this.onWindowResize = b(this.onWindowResize, this)
        },
        bindEventListeners: function() {
            c(this.handle, "mousedown", this.onHandleMouseDown), c(this.handle, "touchstart", this.onHandleTouchStart), c(document, "mousemove", this.onDocumentMouseMove), c(this.wrapper, "touchmove", this.onWrapperTouchMove), c(this.wrapper, "mousedown", this.onWrapperMouseDown), c(this.wrapper, "touchstart", this.onWrapperTouchStart), c(document, "mouseup", this.onDocumentMouseUp), c(document, "touchend", this.onDocumentTouchEnd), c(this.handle, "click", this.onHandleClick), c(window, "resize", this.onWindowResize);
            var a = this;
            this.interval = setInterval(function() {
                a.animate()
            }, 25), this.animate(!1, !0)
        },
        unbindEventListeners: function() {
            d(this.handle, "mousedown", this.onHandleMouseDown), d(this.handle, "touchstart", this.onHandleTouchStart), d(document, "mousemove", this.onDocumentMouseMove), d(this.wrapper, "touchmove", this.onWrapperTouchMove), d(this.wrapper, "mousedown", this.onWrapperMouseDown), d(this.wrapper, "touchstart", this.onWrapperTouchStart), d(document, "mouseup", this.onDocumentMouseUp), d(document, "touchend", this.onDocumentTouchEnd), d(this.handle, "click", this.onHandleClick), d(window, "resize", this.onWindowResize), clearInterval(this.interval)
        },
        onHandleMouseDown: function(a) {
            g.refresh(a), e(a), f(a), this.activity = !1, this.startDrag()
        },
        onHandleTouchStart: function(a) {
            g.refresh(a), f(a), this.activity = !1, this.startDrag()
        },
        onDocumentMouseMove: function(a) {
            g.refresh(a), this.dragging && (this.activity = !0)
        },
        onWrapperTouchMove: function(a) {
            return g.refresh(a), !this.activity && this.draggingOnDisabledAxis() ? void(this.dragging && this.stopDrag()) : (e(a), void(this.activity = !0))
        },
        onWrapperMouseDown: function(a) {
            g.refresh(a), e(a), this.startTap()
        },
        onWrapperTouchStart: function(a) {
            g.refresh(a), e(a), this.startTap()
        },
        onDocumentMouseUp: function(a) {
            this.stopDrag(), this.stopTap()
        },
        onDocumentTouchEnd: function(a) {
            this.stopDrag(), this.stopTap()
        },
        onHandleClick: function(a) {
            this.activity && (e(a), f(a))
        },
        onWindowResize: function(a) {
            this.reflow()
        },
        enable: function() {
            this.disabled = !1, this.handle.className = this.handle.className.replace(/\s?disabled/g, "")
        },
        disable: function() {
            this.disabled = !0, this.handle.className += " disabled"
        },
        reflow: function() {
            this.setWrapperOffset(), this.bounds = this.calculateBounds(), this.valuePrecision = this.calculateValuePrecision(), this.updateOffsetFromValue()
        },
        getStep: function() {
            return [this.getStepNumber(this.value.target[0]), this.getStepNumber(this.value.target[1])]
        },
        getValue: function() {
            return this.value.target
        },
        setStep: function(a, b, c) {
            this.setValue(this.options.steps && a > 1 ? (a - 1) / (this.options.steps - 1) : 0, this.options.steps && b > 1 ? (b - 1) / (this.options.steps - 1) : 0, c)
        },
        setValue: function(a, b, c) {
            this.setTargetValue([a, b || 0]), c && (this.groupCopy(this.value.current, this.value.target), this.updateOffsetFromValue(), this.callAnimationCallback())
        },
        startTap: function() {
            this.disabled || (this.tapping = !0, this.setWrapperOffset(), this.setTargetValueByOffset([g.x - this.offset.wrapper[0] - this.handle.offsetWidth / 2, g.y - this.offset.wrapper[1] - this.handle.offsetHeight / 2]))
        },
        stopTap: function() {
            !this.disabled && this.tapping && (this.tapping = !1, this.setTargetValue(this.value.current))
        },
        startDrag: function() {
            this.disabled || (this.dragging = !0, this.setWrapperOffset(), this.offset.mouse = [g.x - h.get(this.handle)[0], g.y - h.get(this.handle)[1]])
        },
        stopDrag: function() {
            if (!this.disabled && this.dragging) {
                this.dragging = !1;
                var a = this.groupClone(this.value.current);
                if (this.options.slide) {
                    var b = this.change;
                    a[0] += 4 * b[0], a[1] += 4 * b[1]
                }
                this.setTargetValue(a)
            }
        },
        callAnimationCallback: function() {
            var a = this.value.current;
            this.options.snap && this.options.steps > 1 && (a = this.getClosestSteps(a)), this.groupCompare(a, this.value.prev) || ("function" == typeof this.options.animationCallback && this.options.animationCallback.call(this, a[0], a[1]), this.groupCopy(this.value.prev, a))
        },
        callTargetCallback: function() {
            "function" == typeof this.options.callback && this.options.callback.call(this, this.value.target[0], this.value.target[1])
        },
        animate: function(a, b) {
            if (!a || this.dragging) {
                if (this.dragging) {
                    var c = this.groupClone(this.value.target),
                        d = [g.x - this.offset.wrapper[0] - this.offset.mouse[0], g.y - this.offset.wrapper[1] - this.offset.mouse[1]];
                    this.setTargetValueByOffset(d, this.options.loose), this.change = [this.value.target[0] - c[0], this.value.target[1] - c[1]]
                }(this.dragging || b) && this.groupCopy(this.value.current, this.value.target), (this.dragging || this.glide() || b) && (this.updateOffsetFromValue(), this.callAnimationCallback())
            }
        },
        glide: function() {
            var a = [this.value.target[0] - this.value.current[0], this.value.target[1] - this.value.current[1]];
            return a[0] || a[1] ? (Math.abs(a[0]) > this.valuePrecision[0] || Math.abs(a[1]) > this.valuePrecision[1] ? (this.value.current[0] += a[0] * this.options.speed, this.value.current[1] += a[1] * this.options.speed) : this.groupCopy(this.value.current, this.value.target), !0) : !1
        },
        updateOffsetFromValue: function() {
            this.options.snap ? this.offset.current = this.getOffsetsByRatios(this.getClosestSteps(this.value.current)) : this.offset.current = this.getOffsetsByRatios(this.value.current), this.groupCompare(this.offset.current, this.offset.prev) || (this.renderHandlePosition(), this.groupCopy(this.offset.prev, this.offset.current))
        },
        renderHandlePosition: function() {
            this.options.horizontal && (this.handle.style.left = String(this.offset.current[0]) + "px"), this.options.vertical && (this.handle.style.top = String(this.offset.current[1]) + "px")
        },
        setTargetValue: function(a, b) {
            var c = b ? this.getLooseValue(a) : this.getProperValue(a);
            this.groupCopy(this.value.target, c), this.offset.target = this.getOffsetsByRatios(c), this.callTargetCallback()
        },
        setTargetValueByOffset: function(a, b) {
            var c = this.getRatiosByOffsets(a),
                d = b ? this.getLooseValue(c) : this.getProperValue(c);
            this.groupCopy(this.value.target, d), this.offset.target = this.getOffsetsByRatios(d)
        },
        getLooseValue: function(a) {
            var b = this.getProperValue(a);
            return [b[0] + (a[0] - b[0]) / 4, b[1] + (a[1] - b[1]) / 4]
        },
        getProperValue: function(a) {
            var b = this.groupClone(a);
            return b[0] = Math.max(b[0], 0), b[1] = Math.max(b[1], 0), b[0] = Math.min(b[0], 1), b[1] = Math.min(b[1], 1), (!this.dragging && !this.tapping || this.options.snap) && this.options.steps > 1 && (b = this.getClosestSteps(b)), b
        },
        getRatiosByOffsets: function(a) {
            return [this.getRatioByOffset(a[0], this.bounds.availWidth, this.bounds.left), this.getRatioByOffset(a[1], this.bounds.availHeight, this.bounds.top)]
        },
        getRatioByOffset: function(a, b, c) {
            return b ? (a - c) / b : 0
        },
        getOffsetsByRatios: function(a) {
            return [this.getOffsetByRatio(a[0], this.bounds.availWidth, this.bounds.left), this.getOffsetByRatio(a[1], this.bounds.availHeight, this.bounds.top)]
        },
        getOffsetByRatio: function(a, b, c) {
            return Math.round(a * b) + c
        },
        getStepNumber: function(a) {
            return this.getClosestStep(a) * (this.options.steps - 1) + 1
        },
        getClosestSteps: function(a) {
            return [this.getClosestStep(a[0]), this.getClosestStep(a[1])]
        },
        getClosestStep: function(a) {
            for (var b = 0, c = 1, d = 0; d <= this.options.steps - 1; d++) Math.abs(this.stepRatios[d] - a) < c && (c = Math.abs(this.stepRatios[d] - a), b = d);
            return this.stepRatios[b]
        },
        groupCompare: function(a, b) {
            return a[0] == b[0] && a[1] == b[1]
        },
        groupCopy: function(a, b) {
            a[0] = b[0], a[1] = b[1]
        },
        groupClone: function(a) {
            return [a[0], a[1]]
        },
        draggingOnDisabledAxis: function() {
            return !this.options.horizontal && g.xDiff > g.yDiff || !this.options.vertical && g.yDiff > g.xDiff
        }
    };
    var b = function(a, b) {
            return function() {
                return a.apply(b, arguments)
            }
        },
        c = function(a, b, c) {
            a.addEventListener ? a.addEventListener(b, c, !1) : a.attachEvent && a.attachEvent("on" + b, c)
        },
        d = function(a, b, c) {
            a.removeEventListener ? a.removeEventListener(b, c, !1) : a.detachEvent && a.detachEvent("on" + b, c)
        },
        e = function(a) {
            a || (a = window.event), a.preventDefault && a.preventDefault(), a.returnValue = !1
        },
        f = function(a) {
            a || (a = window.event), a.stopPropagation && a.stopPropagation(), a.cancelBubble = !0
        },
        g = {
            x: 0,
            y: 0,
            xDiff: 0,
            yDiff: 0,
            refresh: function(a) {
                a || (a = window.event), "mousemove" == a.type ? this.set(a) : a.touches && this.set(a.touches[0])
            },
            set: function(a) {
                var b = this.x,
                    c = this.y;
                a.pageX || a.pageY ? (this.x = a.pageX, this.y = a.pageY) : (a.clientX || a.clientY) && (this.x = a.clientX + document.body.scrollLeft + document.documentElement.scrollLeft, this.y = a.clientY + document.body.scrollTop + document.documentElement.scrollTop), this.xDiff = Math.abs(this.x - b), this.yDiff = Math.abs(this.y - c)
            }
        },
        h = {
            get: function(a) {
                var b = 0,
                    c = 0;
                if (a.offsetParent)
                    do b += a.offsetLeft, c += a.offsetTop; while (a = a.offsetParent);
                return [b, c]
            }
        };
    return a
}), jQuery(document).ready(function(a) {
    a(".cq-draggable-container").each(function(b) {
        function t() {
            clearTimeout(r), r = setTimeout(function() {
                s += 1 / o, s >= 1 && (s = .5 / o), q.setValue(s)
            }, e)
        }
        var c = a(this),
            d = "yes" == a(this).data("autoplay") ? !0 : !1,
            e = a(this).data("_autoplayspeed") || 5e3,
            f = a(this).data("labelcolor"),
            g = a(this).data("dragbuttonwidth"),
            h = a(this).data("contaienrwidth") || "80%",
            i = a(this).data("defaultbarbgcolor"),
            j = a(this).data("draggingbarbgcolor") || "rgba(0,0,0,0.5)",
            k = a(this).data("activeiconcolor"),
            l = a(this).data("avatarstyle");
        c.css("width", h), a(".cq-draggable-slider", c).css("background-color", i), a(".cq-draggable-stripe", c).css("background-color", j), a(".cq-highlight-label", c).css("color", f), a(".cq-menu-square", c).css("width", g), a(".cq-carouselcontent").perfectScrollbar({
            stopPropagationOnClick: !1
        });
        var m = a(".cq-titlecontainer", c).slick({
                touchMove: !1,
                swipe: !1,
                slidesToShow: 1,
                slidesToScroll: 1,
                infinite: !1,
                arrows: !1
            }),
            n = a(".cq-carouselcontainer", c).slick({
                touchMove: !1,
                swipe: !1,
                slidesToShow: 1,
                slidesToScroll: 1,
                infinite: !1,
                arrows: !1
            }),
            o = a(".cq-barcontainer", c).find(".cq-highlight-container").length;
        a(".cq-barcontainer", c).find(".cq-highlight-container").each(function(b) {
            var c = a(this).find(".cq-highlight");
            if (c[0]) {
                var d = c.data("iconbgcolors");
                c.css("background-color", d)
            }
            a(this).css({
                width: 1 / o * 100 + "%"
            })
        });
        var p = 0,
            q = new Dragdealer(a(".cq-draggable-slider", c)[0], {
                handleClass: "cq-draggable-handle",
                speed: .3,
                animationCallback: function(b, e) {
                    d && t();
                    var f = Math.round(100 * b),
                        g = f;
                    p = Math.floor((f + 2) * o / 100), a(".cq-draggable-stripe", c).css("width", "" + g + "%"), n.slickGoTo(p), m.slickGoTo(p)
                },
                callback: function(b, d) {
                    var e = Math.round(100 * b);
                    p = Math.floor((e + 2) * o / 100);
                    var e = Math.round(100 * b);
                    "text" == l && a(".cq-highlight-label", c).each(function(b) {
                        p >= b ? a(this).stop(!0).animate({
                            "margin-top": "32px"
                        }, 400) : a(this).stop(!0).animate({
                            "margin-top": ""
                        }, 400)
                    }), a(".cq-highlight", c).each(function(b) {
                        if ("text" == l);
                        else if ("icon" == l)
                            if (p >= b) "" != k && a(this).css({
                                "background-color": k
                            });
                            else {
                                var c = a(this).data("iconbgcolors");
                                a(this).css({
                                    "background-color": c
                                })
                            }
                    })
                }
            });
        a(".cq-draggable-slider", c).on("click", function(b) {
            var c = b.pageX - a(this).parent().offset().left;
            q.setValue(c / a(this).parent().width())
        });
        var r, s = .5 / o;
        c.on("mouseover", function(a) {
            d && clearTimeout(r)
        }).on("mouseleave", function(a) {
            d && t()
        }), q.setValue(.5 / o || .1)
    })
});